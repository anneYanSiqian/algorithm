/**
 * @param {character[][]} matrix
 * @return {number}
 */
var maximalRectangle = function(matrix) {
    const rows = matrix.length;
    const cols = matrix[0].length;
    let ans = 0;
    
    let heights = new Array(cols).fill(0);

    
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if(matrix[i][j] == '1' ) heights[j] += 1;
            else heights[j] = 0;
        }
        ans = Math.max(ans, largestRectangleArea(heights));
    }

    return ans;
};

function largestRectangleArea(heights) {
    let answer = 0;
    const stack = [];
    heights.push(0);
    for (height of heights) {
        let addWidth = 0;
        while (stack.length && stack[stack.length - 1].height >= height) {
            addWidth += stack[stack.length - 1].width;
            answer = Math.max(answer, stack[stack.length - 1].height * addWidth);
            stack.pop();
        }
        stack.push({
            width: addWidth + 1,
            height: height
        });
    }
    return answer;
};
